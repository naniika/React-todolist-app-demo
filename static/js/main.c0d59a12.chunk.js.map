{"version":3,"sources":["components/TodoListItems.js","App.js","serviceWorker.js","index.js"],"names":["TodoListItems","props","listItems","items","map","item","className","key","type","id","value","text","onChange","e","setUpdate","target","onClick","deleteItem","class","duration","easing","App","state","currentItem","handleInput","bind","addItem","this","setState","Date","now","preventDefault","newItem","newItems","filteredItems","filter","onSubmit","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0RA0CeA,MAvCf,SAAuBC,GACnB,IACMC,EADQD,EAAME,MACIC,KACpB,SAAAC,GACI,OACI,wBAAIC,UAAU,iDAAiDC,IAAKF,EAAKE,KACrE,yBAAKD,UAAU,eACX,2BACIE,KAAK,OACLC,GAAIJ,EAAKE,IACTG,MAAOL,EAAKM,KACZC,SACI,SAACC,GACGZ,EAAMa,UAAUD,EAAEE,OAAOL,MAAOL,EAAKE,MAG7CD,UAAU,iCAEd,yBACIA,UAAU,qBACVU,QACI,kBAAMf,EAAMgB,WAAWZ,EAAKE,OAGhC,4BAAQC,KAAK,SAASU,MAAM,0BACxB,uBAAGZ,UAAU,wBAQzC,OACI,kBAAC,IAAD,CAAUa,SAAU,IAAKC,OAAO,eAC3BlB,ICmEEmB,G,kBApGb,WAAYpB,GAAQ,IAAD,8BACjB,4CAAMA,KACDqB,MAAQ,CACXnB,MAAO,GACPoB,YAAa,CACXZ,KAAM,GACNJ,IAAK,KAGT,EAAKiB,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKR,WAAa,EAAKA,WAAWQ,KAAhB,gBAClB,EAAKX,UAAY,EAAKA,UAAUW,KAAf,gBAZA,E,yEAcPZ,GACVc,KAAKC,SAAS,CACZL,YAAa,CACXZ,KAAME,EAAEE,OAAOL,MACfH,IAAKsB,KAAKC,W,8BAIRjB,GACNA,EAAEkB,iBACF,IAAMC,EAAUL,KAAKL,MAAMC,YAC3B,GAAqB,KAAjBS,EAAQrB,KAAa,CACvB,IAAMsB,EAAQ,sBAAON,KAAKL,MAAMnB,OAAlB,CAAyB6B,IACvCL,KAAKC,SAAS,CACZzB,MAAO8B,EACPV,YAAa,CACXZ,KAAM,GACNJ,IAAK,S,iCAKFA,GACT,IAAM2B,EAAgBP,KAAKL,MAAMnB,MAAMgC,QAAO,SAAA9B,GAAI,OAChDA,EAAKE,MAAQA,KACfoB,KAAKC,SAAS,CACZzB,MAAO+B,M,gCAGDvB,EAAMJ,GACd,IAAMJ,EAAQwB,KAAKL,MAAMnB,MACzBA,EAAMC,KAAI,SAAAC,GAIR,OAHIA,EAAKE,MAAQA,IACfF,EAAKM,KAAOA,GAEPN,KAETsB,KAAKC,SAAS,CACZzB,MAAOA,M,+BAIT,OACE,yBAAKG,UAAU,OACb,yBAAKY,MAAM,uDACT,yBAAKA,MAAM,gCAAX,0BAEF,yBAAKZ,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,gCACb,wBAAIA,UAAU,+BAAd,cACA,yBAAKA,UAAU,uBACb,0BAAM8B,SAAUT,KAAKD,SACnB,yBAAKpB,UAAU,eACb,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,0CACb,uBAAGA,UAAU,kBAGjB,2BACEE,KAAK,OACLF,UAAU,+BACV+B,YAAY,aACZ3B,MAAOiB,KAAKL,MAAMC,YAAYZ,KAC9BC,SAAUe,KAAKH,eAGnB,4BAAQhB,KAAK,SAASF,UAAU,kDAAhC,cAGJ,wBAAIA,UAAU,mBACZ,wBAAIA,UAAU,+BAAd,eACA,kBAAC,EAAD,CAAeH,MAAOwB,KAAKL,MAAMnB,MAC/Bc,WAAYU,KAAKV,WACjBH,UAAWa,KAAKb,qB,GAzFhBwB,IAAMC,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c0d59a12.chunk.js","sourcesContent":["import React from 'react';\r\nimport FlipMove from 'react-flip-move';\r\n\r\nfunction TodoListItems(props) {\r\n    const items = props.items;\r\n    const listItems = items.map(\r\n        item => {\r\n            return (\r\n                <li className=\"list-group-item d-flex justify-content-between\" key={item.key}>\r\n                    <div className=\"input-group\">\r\n                        <input\r\n                            type=\"text\"\r\n                            id={item.key}\r\n                            value={item.text}\r\n                            onChange={\r\n                                (e) => {\r\n                                    props.setUpdate(e.target.value, item.key)\r\n                                }\r\n                            }\r\n                            className=\"form-control text-capitalize\"\r\n                        />\r\n                        <div\r\n                            className=\"input-group-append\"\r\n                            onClick={\r\n                                () => props.deleteItem(item.key)\r\n                            }\r\n                        >\r\n                            <button type=\"button\" class=\"btn btn-outline-danger\" >\r\n                                <i className=\"fas fa-trash\" />\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </li>\r\n            )\r\n        }\r\n    )\r\n    return (\r\n        <FlipMove duration={200} easing=\"ease-in-out\">\r\n            {listItems}\r\n        </FlipMove>\r\n    )\r\n}\r\nexport default TodoListItems;","import React from 'react';\nimport TodoListItems from './components/TodoListItems';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [],\n      currentItem: {\n        text: '',\n        key: ''\n      }\n    }\n    this.handleInput = this.handleInput.bind(this);\n    this.addItem = this.addItem.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.setUpdate = this.setUpdate.bind(this);\n  }\n  handleInput(e) {\n    this.setState({\n      currentItem: {\n        text: e.target.value,\n        key: Date.now()\n      }\n    })\n  }\n  addItem(e) {\n    e.preventDefault();\n    const newItem = this.state.currentItem;\n    if (newItem.text !== \"\") {\n      const newItems = [...this.state.items, newItem];\n      this.setState({\n        items: newItems,\n        currentItem: {\n          text: '',\n          key: ''\n        }\n      })\n    }\n  }\n  deleteItem(key) {\n    const filteredItems = this.state.items.filter(item =>\n      item.key !== key);\n    this.setState({\n      items: filteredItems\n    })\n  }\n  setUpdate(text, key) {\n    const items = this.state.items;\n    items.map(item => {\n      if (item.key === key) {\n        item.text = text;\n      }\n      return item;\n    })\n    this.setState({\n      items: items\n    })\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <nav class=\"navbar sticky-top navbar-expand navbar-dark bg-dark\">\n          <div class=\"navbar-brand text-capitalize\">todo list - react app</div>\n        </nav>\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-10 mx-auto col-md-8 mt-4\">\n              <h3 className=\"text-capitalize text-center\">todo input</h3>\n              <div className=\"card card-body my-3\">\n                <form onSubmit={this.addItem}>\n                  <div className=\"input-group\">\n                    <div className=\"input-group-prepend\">\n                      <div className=\"input-group-text bg-primary text-white\">\n                        <i className=\"fas fa-book\" />\n                      </div>\n                    </div>\n                    <input\n                      type=\"text\"\n                      className=\"form-control text-capitalize\"\n                      placeholder=\"enter text\"\n                      value={this.state.currentItem.text}\n                      onChange={this.handleInput}\n                    />\n                  </div>\n                  <button type=\"submit\" className=\"btn btn-block btn-primary mt-3 text-capitalize\">add item</button>\n                </form>\n              </div>\n              <ul className=\"list-group my-5\">\n                <h3 className=\"text-capitalize text-center\">todo list :</h3>\n                <TodoListItems items={this.state.items}\n                  deleteItem={this.deleteItem}\n                  setUpdate={this.setUpdate}\n                />\n              </ul>\n            </div>\n          </div>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}